{"version":3,"sources":["webpack:///./src/components/index.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iBAoE6D;;AApE7D,sDAA8B;AAC9B,iEAAqC;AACrC,wDAAiC;AACjC,wDAAyB;AACzB;;;;;;;;;;;;;;;wBAewB;AAExB,IAAM,aAAa,GAAG;IAClB,OAAO,CACH;;QACO,+BAAM;QACT,qCAAqB;QACrB,+BAAO,IAAI,EAAC,OAAO,EAAC,IAAI,EAAC,QAAQ,GAAG;QAAA,+BAAO,OAAO,EAAC,QAAQ,aAAU;QACrE,+BAAO,IAAI,EAAC,OAAO,EAAC,IAAI,EAAC,QAAQ,GAAG;QAAA,+BAAO,OAAO,EAAC,QAAQ,aAAU;QACrE;;YAAO,+BAAM;YACT,+BAAO,IAAI,EAAC,UAAU,EAAC,IAAI,EAAC,OAAO,GAAE;;YACrC,+BAAO,IAAI,EAAC,UAAU,EAAC,IAAI,EAAC,OAAO,GAAE;;YACrC,+BAAO,IAAI,EAAC,UAAU,EAAC,IAAI,EAAC,OAAO,GAAE;wCACrC;QACJ,gCAAQ,IAAI,EAAC,SAAS,EAAE,QAAQ;YAC5B,qEAAsB;YACtB,qEAAsB;YACtB,qEAAsB,CACjB;QACT,+BAAO,IAAI,EAAC,QAAQ,EAAC,KAAK,EAAC,cAAI,GAAG,CAC/B,CACV;AACL,CAAC;AAED,IAAM,GAAG,GAAG;IAER,IAAM,OAAO,GAAG;;;;;;oBAEV,eAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,kBAAkB,CAAC,GAAG,gBAAgB;oBACjD,qBAAM,eAAK,CAAC,GAAG,CAAC,YAAY,CAAC;;oBAAnC,GAAG,GAAG,SAA6B;oBACzC,KAAK,CAAC,UAAQ,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,MAAG,CAAC,CAAC;;;;oBAErC,KAAK,CAAC,OAAO,CAAC;oBACd,OAAO,CAAC,GAAG,CAAC,GAAC,CAAC;;;;;SAEjB;IAED,iBAAS,CAAC;QACR,OAAO,EAAE;IACX,CAAC,CAAC;IAEN,OAAO,CACH;QACI,oBAAC,aAAa,OAAG,CACf,CACT;AAEH,CAAC;AAED,QAAQ,CAAC,MAAM,CAAC,oBAAC,GAAG,OAAE,EAAE,QAAQ,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC","file":"main.aeab824dc09b8f9d6895.hot-update.js","sourcesContent":["import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport { useEffect } from 'react'\nimport axios from 'axios'\n/* 10項目の項目（スキーマ）を用意し、画面で入力したデータを登録、編集、削除するアプリを作成する。\n項目名は和名と英名を用意し、和名を画面描画に使用し、英名をスキーマ名に使用すること\n例）和名：名前　英名：name\n一覧画面（index.html）を開くと登録したデータをテーブルで一覧表示する。\nデータが登録されていない場合は「登録されていない」旨を表示する。\nindex.htmlに「新規登録」ボタンを設置し、登録画面に遷移する。\n登録画面で10項目を入力するフォームを用意する。\n テキストエリア、ラジオボタン、セレクトボックス、チェックボックスを必ず使用すること\n登録画面で「登録」ボタンを押下し、データを登録する。成功時には一覧画面に遷移する。一覧には登録した全データが表示されていること\n登録に失敗した場合は、エラー内容をalertで表示すること\n一覧から任意のデータを選択し、そのデータの編集画面に遷移する。\n編集画面で選択したデータの編集が行えること\n編集画面に「更新」ボタンを押下し、データを更新する。成功時に一覧画面に遷移する。一覧には編集後のデータが表示されていること\n失敗時にはエラー内容をalertで表示すること\n一覧から任意のデータを選択し、「削除」ボタンを押下することでそのデータを削除する。\n削除成功時には削除後の一覧が表示されること */\n\nconst FormComponent = () => {\n    return (\n        <form>\n            メモ:<br />\n            <textarea></textarea>\n            <input type=\"radio\" name=\"gender\" /><label htmlFor=\"gender\">男</label>\n            <input type=\"radio\" name=\"gender\" /><label htmlFor=\"gender\">女</label>\n            <p>チェック<br />\n                <input type=\"checkbox\" name=\"check\"/>チェック１\n                <input type=\"checkbox\" name=\"check\"/>チェック2\n                <input type=\"checkbox\" name=\"check\"/>チェック3\n            </p>\n            <select name=\"example\"  multiple>\n                <option>サンプル１</option>\n                <option>サンプル２</option>\n                <option>サンプル３</option>\n            </select>\n            <input type=\"submit\" value=\"送信\" />\n        </form>\n    )\n}\n\nconst App = () => {\n  \n    const getdata = async () => {\n        try {\n          axios.defaults.headers['X-Requested-With'] = 'XMLHttpRequest'\n          const res = await axios.get('/d/foo/2?e')\n          alert(`res= ${res.data.user.name} `);\n        } catch (e) {\n          alert('error')\n          console.log(e)\n        }\n      }\n\n      useEffect(() => {\n        getdata()\n      })\n    \n  return (\n      <div>\n          <FormComponent />\n      </div>\n  )\n\n}\n\nReactDOM.render(<App/>, document.getElementById('container'))"],"sourceRoot":""}