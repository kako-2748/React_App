{"version":3,"sources":["webpack:///./src/components/index.tsx"],"names":[],"mappings":"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","file":"main.db4edbeec65284ca11aa.hot-update.js","sourcesContent":["import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport { useState, useEffect } from 'react'\nimport axios from 'axios'\n/* 10項目の項目（スキーマ）を用意し、画面で入力したデータを登録、編集、削除するアプリを作成する。\n項目名は和名と英名を用意し、和名を画面描画に使用し、英名をスキーマ名に使用すること\n例）和名：名前　英名：name\n一覧画面（index.html）を開くと登録したデータをテーブルで一覧表示する。\nデータが登録されていない場合は「登録されていない」旨を表示する。\nindex.htmlに「新規登録」ボタンを設置し、登録画面に遷移する。\n登録画面で10項目を入力するフォームを用意する。\n登録画面で「登録」ボタンを押下し、データを登録する。成功時には一覧画面に遷移する。一覧には登録した全データが表示されていること\n登録に失敗した場合は、エラー内容をalertで表示すること\n一覧から任意のデータを選択し、そのデータの編集画面に遷移する。\n編集画面で選択したデータの編集が行えること\n編集画面に「更新」ボタンを押下し、データを更新する。成功時に一覧画面に遷移する。一覧には編集後のデータが表示されていること\n失敗時にはエラー内容をalertで表示すること\n一覧から任意のデータを選択し、「削除」ボタンを押下することでそのデータを削除する。\n削除成功時には削除後の一覧が表示されること */\n\nconst FormComponent = () => {\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [memo, setMemo] = useState('')\n    const [gender, setGender] = useState('')\n    const [job, setJob] = useState('')\n    const [address, setAddress] = useState('')\n    const [height, setHeight] = useState('')\n\n    const changeName = (e:any) => {\n        setName(e.target.value)\n    }\n    const changeEmail = (e:any) => {\n        setEmail(e.target.value)\n    }\n    const changeJob = (e:any) => {\n        setJob(e.target.value)\n    }\n    const changeAddress = (e:any) => {\n        setAddress(e.target.value)\n    }\n    const changeMemo = (e:any)  => {\n        setMemo(e.target.value)\n    }\n    const changeHeight = (e:any) => {\n        setHeight(e.target.value)\n    }\n    const checkedMen = () => {\n        setGender('男')\n    }\n    const checkedWoen = () => {\n        setGender('女')\n    }\n    return (\n        <form>    \n            <input type=\"text\" name={name} value={name} onChange={changeName} placeholder=\"名前\"　/>\n            <input type=\"text\" name={email} value={email} onChange={changeEmail} placeholder=\"メールアドレス\" />\n            <label htmlFor=\"calendar\">生年月日:</label>\n            <input type=\"date\" name=\"calendar\" max=\"9999-12-31\"></input>\n            <input type=\"text\" name={job} value={job} onChange={changeJob} placeholder=\"職業\" />\n            <input type=\"text\" name={address} value={address} onChange={changeAddress} placeholder=\"住所\" />\n            <input type=\"radio\" name={gender} onChange={checkedMen} /><label htmlFor=\"gender\">男</label>\n            <input type=\"radio\" name={gender} onChange={checkedWoen}/><label htmlFor=\"gender\">女</label>\n            <label htmlFor={height}>身長</label><input type=\"number\" name={height} value={height} onChange={changeHeight}/>\n            <p>チェック<br />\n                <input type=\"checkbox\" name=\"check\"/>チェック１\n                <input type=\"checkbox\" name=\"check\"/>チェック2\n                <input type=\"checkbox\" name=\"check\"/>チェック3\n            </p>\n            <select name=\"example\"  multiple>\n                <option>サンプル１</option>\n                <option>サンプル２</option>\n                <option>サンプル３</option>\n            </select>\n            <textarea name={memo} value={memo} onChange={changeMemo} placeholder=\"メモ\"></textarea>\n            {/*onclickでデータ登録 成功時に一覧画面遷移 失敗したらエラー内容をアラート*/}\n            <input type=\"submit\" value=\"登録\" />\n        </form>\n    )\n}\n\nconst App = () => {\n  \n    const getdata = async () => {\n        try {\n          axios.defaults.headers['X-Requested-With'] = 'XMLHttpRequest'\n          const res = await axios.get('/d/foo/2?e')\n          alert(`res= ${res.data.user.name} `);\n        } catch (e) {\n          alert('error')\n          console.log(e)\n        }\n      }\n\n      useEffect(() => {\n        getdata()\n      })\n    \n  return (\n      <div>\n          <FormComponent />\n      </div>\n  )\n\n}\n\nReactDOM.render(<App/>, document.getElementById('container'))"],"sourceRoot":""}