#!/usr/bin/env node
'use strict'
const confy = require('confy')
const readlineSync = require('readline-sync')
const argv = require('minimist')(process.argv.slice(2))
const vtecxutil = require('../index.js')
const recursive = require('recursive-readdir')

if (argv._[0]==='login') {
  vtecxutil.loginedservice()
  const service = readlineSync.question('service:')
  if (service==='') {
  }else {
    const isproduction = readlineSync.question('is production?:')==='y' ? true : false
    const account = readlineSync.question('login:')
    const password = readlineSync.question('password:', { hideEchoBack: true })
    vtecxutil.getAccesstoken(service,account,password,isproduction)
  }
}

if (argv._[0]==='download:template') {
  vtecxutil.downloadTemplate()
}

if (argv._[0]==='download:typings') {
  vtecxutil.downloadTypings()
}

if (argv._[0]==='download:properties') {
  vtecxutil.downloadProperties()
}

if (argv._[0]==='download:bigquery.json') {
  vtecxutil.downloadbigqueryjson()
}

if (argv._[0]==='download') {
  vtecxutil.downloadTemplate()
  vtecxutil.downloadTypings()
  vtecxutil.downloadProperties()
  vtecxutil.downloadbigqueryjson()
}

if (argv._[0]==='upload:bigquery.json') {
  vtecxutil.sendfile('setup/_settings/bigquery.json', '?_content', false, true)
}else
if (argv._[0]==='upload:template') {
  vtecxutil.sendfile('setup/_settings/template.xml', '?_bulkserial&_async')
}else
if (argv._[0]==='upload:htmlfolders') {
  vtecxutil.sendfile('setup/_settings/htmlfolders.xml', '?_bulkserial')
}else
if (argv._[0]==='upload:properties') {
  vtecxutil.sendfile('setup/_settings/properties.xml', '')
}else
if (argv._[0]==='upload:folderacls') {
  vtecxutil.sendfile('setup/_settings/folderacls.xml', '?_bulkserial')
}else
if (argv._[0]==='upload:data') {
  if (argv._[1]) {
    const file = 'data/' + argv._[1]
    vtecxutil.sendfile(file, '?_bulkserial&_async')
  }else {
    recursive('data', [], function(err, files) {
      files.map(file => vtecxutil.sendfile(file, '?_bulkserial&_async'))
    })
  }
}else
if (argv._[0]==='upload:server') {
  if (argv._[1]) {
    const file = 'dist/server/' + argv._[1]
    vtecxutil.sendfile(file, '?_content&_bulk&_async')
  }else {
    recursive('dist/server', [], function(err, files) {
      files.map(file => {
        if (file.substring(file.lastIndexOf('.')+1)==='js') {
          vtecxutil.sendfile(file, '?_content&_bulk&_async')
        }
      })
    })
  }
}else
if (argv._[0]==='upload:components') {
  if (argv._[1]) {
    const file = 'dist/components/' + argv._[1]
    vtecxutil.sendfile(file, '?_content&_bulk&_async')
  }else {
    recursive('dist/components', [ignorefolder], function(err, files) {
      files.map(file => {
          vtecxutil.sendfile(file, '?_content&_bulk&_async')
      })
    })
  }
}else
if (argv._[0]==='upload:dist') {
    recursive('dist', [createfolder], function(err, files) {
      files.map(file => {
          vtecxutil.sendfile(file, '?_content&_bulk&_async')
      })
    })
}else
if (argv._[0]==='upload:html') {
  upload_html()
}else
if (argv._[0]==='upload:img') {
  upload_img()
}else
if (argv._[0]==='upload:settings') {
  upload_settings()
}else
if (argv._[0]==='upload') {
  vtecxutil.sendfile('setup/_settings/htmlfolders.xml', '?_bulk')
  vtecxutil.sendfile('setup/_settings/template.xml', '?_bulk')
  vtecxutil.sendfile('setup/_settings/properties.xml', '')
  vtecxutil.sendfile('setup/_settings/folderacls.xml', '?_bulk')
  upload_settings()
  upload_img()
  upload_html()
}else
if (argv._[0]==='clean:server') {
  vtecxutil.cleanserver()
}

function upload_html() {
    recursive('src', [ignorefolder], function(err, files) {
      files.map(file => {
        if (file.substring(file.lastIndexOf('.')+1)==='html') {
          vtecxutil.sendfile(file, '?_content&_bulk&_async')
        }
      })
    })
}

function upload_img() {
    vtecxutil.sendfile('src/img', '?_content', true)
    recursive('src/img', [ignorefolder], function(err, files) {
      files.map(file => {
          vtecxutil.sendfile(file, '?_content&_bulk&_async')
      })
    })
}

function upload_settings() {
  recursive('setup', [], function(err, files) {
    files.map(file => {
      if (file.indexOf('bigquery.json') >= 0) {
        vtecxutil.sendfile(file, '?_content', false, true)
      } else if (file.indexOf('template.xml') < 0 && file.indexOf('folderacls.xml') < 0 && file.indexOf('htmlfolders.xml') < 0) {
        vtecxutil.sendfile(file, '')
      }
    })
  })
}


function ignorefolder(file, stats) {
  if (stats && stats.isDirectory()) {
    return true
  }
  return false
}

function createfolder(file, stats) {
  if (stats && stats.isDirectory()) {
    vtecxutil.sendfile(file, '?_content', true)
    return false
  }
  return false
}
