const axios = require('axios')
const vtecxauth = require('vtecxauth')
const confy = require('confy')
const fsasync = require('fs')
const request = require('request')

exports.getAccesstoken = function(service,account,password,isproduction) {

  const authToken = vtecxauth.getAuthToken(account, password)
  const s = isproduction ? 's' : ''
  const path = 'http'+s+'://'+service+'.vte.cx'

  axios({
    url: path+'/d/?_accesstoken',
    method: 'get',
    headers: {
      'X-WSSE': authToken,
      'X-Requested-With': 'XMLHttpRequest'
    }
  })
    .then(result => {
      confy.set('$default', { data: { service : service } }, function(err, result) {
        if (err) console.log(err)
      })
      confy.set(service, { data: { accesstoken : result.data.feed.title , path : path } }, function(err, result) {
        if (err) console.log(err)
      })
      console.log('Logged in.')
    })
    .catch(error => {
      console.log('Login failed.')
    })

}

exports.loginedservice = function() {

  confy.get('$default', function(err, result) {
    if (result) {
      service = result.service
      console.log('Service currently logged in:'+result.service)
    }else {
      console.log('Please login.')
    }
  })

}

exports.downloadTemplate = function() {

  confy.get('$default', function(err, result) {
    if (result) {
      service = result.service
    }else {
      console.log('Please login.')
    }
  })

  confy.get(service, function(err, result) {
   accesstoken = result.accesstoken
   path = result.path
  })

  axios({
    url: path+'/d/_settings/template?e&x&_nometa',
    method: 'get',
    headers: {
      'Authorization': 'Token '+accesstoken,
      'X-Requested-With': 'XMLHttpRequest'
    }
  })
    .then(result => {
      axios({
        url: path+'/d/_settings/template_property?f&x&_nometa&l=*',
        method: 'get',
        headers: {
          'Authorization': 'Token '+accesstoken,
          'X-Requested-With': 'XMLHttpRequest'
        }
      })
        .then(result2 => {
          const template = result.data.substring(result.data.indexOf('<entry>'))
            + '\n<entry>\n  <link href="/_settings/template_property" rel="self"/>\n</entry>'
          const template_all = result2.data.replace('<feed>','<feed>\n'+template)
          fsasync.writeFileSync( './setup/_settings/template.xml' , template_all )
          console.log('template is saved.')
        })
        .catch(error => {
          console.log('Get failed.:'+error)
        })
    })
    .catch(error => {
      console.log('Get failed.:'+error)
    })

}

exports.downloadTypings = function() {

  confy.get('$default', function(err, result) {
    if (result) {
      service = result.service
    }else {
      console.log('Please login.')
    }
  })

  confy.get(service, function(err, result) {
   accesstoken = result.accesstoken
   path = result.path
  })

  axios({
    url: path+'/d/_settings/index.d.ts',
    method: 'get',
    headers: {
      'Authorization': 'Token '+accesstoken,
      'X-Requested-With': 'XMLHttpRequest'
    }
  })
    .then(result => {
      fsasync.writeFileSync( './src/typings/index.d.ts' , result.data )
      console.log('index.d.ts is saved.')
    })
    .catch(error => {
      console.log('Get failed.:'+error)
    })

}

exports.downloadProperties = function() {

  confy.get('$default', function(err, result) {
    if (result) {
      service = result.service
    }else {
      console.log('Please login.')
    }
  })

  confy.get(service, function(err, result) {
   accesstoken = result.accesstoken
   path = result.path
  })

  axios({
    url: path+'/d/_settings/properties?e&x&_nometa',
    method: 'get',
    headers: {
      'Authorization': 'Token '+accesstoken,
      'X-Requested-With': 'XMLHttpRequest'
    }
  })
    .then(result => {
      axios({
        url: path+'/d/_settings/adduser?e&x&_nometa',
        method: 'get',
        headers: {
          'Authorization': 'Token '+accesstoken,
          'X-Requested-With': 'XMLHttpRequest'
        }
      })
        .then(result2 => {
          axios({
            url: path+'/d/_settings/passreset?e&x&_nometa',
            method: 'get',
            headers: {
              'Authorization': 'Token '+accesstoken,
              'X-Requested-With': 'XMLHttpRequest'
            }
          })
            .then(result3 => {
              const properties = result.data.substring(result.data.indexOf('<entry>'))
              const adduser = result2.data.substring(result2.data.indexOf('<entry>'))
              const passreset = result3.data.substring(result3.data.indexOf('<entry>'))
              const properties_all = '<feed>\n'+properties+adduser+passreset+'\n</feed>'
              fsasync.writeFileSync( './setup/_settings/properties.xml' , properties_all )
              console.log('properties is saved.')
            })
            .catch(error => {
              console.log('Get failed.:'+error)
            })
        })
        .catch(error => {
          console.log('Get failed.:'+error)
        })
    })
    .catch(error => {
      console.log('Get failed.:'+error)
    })

}

exports.downloadbigqueryjson = function() {

  confy.get('$default', function(err, result) {
    if (result) {
      service = result.service
    }else {
      console.log('Please login.')
    }
  })

  confy.get(service, function(err, result) {
   accesstoken = result.accesstoken
   path = result.path
  })

  axios({
    url: path+'/d/_settings/bigquery.json',
    method: 'get',
    headers: {
      'Authorization': 'Token '+accesstoken,
      'X-Requested-With': 'XMLHttpRequest'
    }
  })
    .then(result => {
      fsasync.writeFileSync( './setup/_settings/bigquery.json' , JSON.stringify(result.data,null,'\t') )
      console.log('bigquery.json is saved.')
    })
    .catch(error => {
      console.log('Get failed.:'+error)
    })

}

exports.cleanserver = function() {

  let service
  let accesstoken
  let path

  confy.get('$default', function(err, result) {
    if (result) {
      service = result.service
    }else {
      console.log('Please login.')
    }
  })

  confy.get(service, function(err, result) {
   accesstoken = result.accesstoken
   path = result.path
  })

  const createentry = () => {
    const reqdata = [{
      'contributor':[
        { 'uri': 'urn:vte.cx:acl:/_group/$admin,CRUD' },
        { 'uri': 'urn:vte.cx:acl:+,R' }
      ],
      'link':
      [{ '___rel': 'self', '___href': '/_html' }]
    },
    {
      'contributor':[
        { 'uri': 'urn:vte.cx:acl:/_group/$admin,CRUD' },
        { 'uri': 'urn:vte.cx:acl:+,RE./' }
      ],
      'link':
      [{ '___rel': 'self', '___href': '/_html/server' }]
    }
    ]

  axios({
    url: path+'/d',
    method: 'post',
    headers: {
      'Authorization': 'Token '+accesstoken,
      'X-Requested-With': 'XMLHttpRequest'
    },
    data : reqdata
  })
  .then(result => {
      console.log('\'/_html\' has been cleaned.')
  })
  .catch(error => {
      console.log(error)
  })
  }


  axios({
    url: path+'/d/_html?_rf',
    method: 'delete',
    headers: {
      'Authorization': 'Token '+accesstoken,
      'X-Requested-With': 'XMLHttpRequest'
    }
  })
    .then(result => {
      createentry()
    })
    .catch(error => {
      if (error.response.status===404) {
        createentry()
      }else {
        console.log(error)
      }
    })

}

const sendfile = function(file, param, isdirectory, isd) {

  let service
  let accesstoken
  let path

  confy.get('$default', function(err, result) {
    if (result) {
      service = result.service
    }else {
      console.log('Please login.')
    }
  })

  confy.get(service, function(err, result) {
   accesstoken = result.accesstoken
   path = result.path
  })

  isd = isd ? '/d' : ''
  let url = path + isd + file.substring(file.indexOf('/'))

  var options = {
    url: url + param,
    headers: {
      'Content-Type': gettype(file),
      'X-Requested-With': 'XMLHttpRequest',
      Authorization: 'Token ' + accesstoken
    }
  }
  if (isdirectory) {
    options.headers['Content-Length'] = '0'
  }
  let retrycount = 5

  function callback(error, response, body) {
    var dir = ''
    if (isdirectory) {
      dir = ' (folder)'
    }
    console.log(file + dir + ' --> ' + url)
    if (!error && (response.statusCode == 200 || response.statusCode == 202)) {
      console.log(body)
    } else {
      if (response) {
        if (response.statusCode) {
          if (response.statusCode == 302) {
            let status
            let errmsg
            response.headers['set-cookie'].map(msg => {
              if (msg.indexOf('ERROR_STATUS') >= 0) {
                status = msg.split(';')[0]
              } else if (msg.indexOf('ERROR_MESSAGE') >= 0) {
                errmsg = msg.split(';')[0]
              }
            })
            if (errmsg.indexOf('ERROR_MESSAGE=Entry+is+required.') >= 0) {
              console.log('No updates.')
              retrycount = 0
            } else {
              console.log(response.body)
              console.log(status)
              console.log(errmsg)
            }
          } else {
            if (response.statusCode == 400 && response.body.indexOf('Entry is required.') > 0) {
              console.log('No updates.')
              retrycount = 0
            } else {
              console.log('response code=' + response.statusCode)
              console.log(response.body)
            }
          }
        } else {
          console.log("can't PUT content. ")
        }
      } else {
        console.log("can't PUT content.")
      }
      retrycount--
      if (retrycount > 0) {
        console.log('then retry :' + retrycount)
        fsasync.createReadStream(file).pipe(request.put(options, callback))
      }
    }
  }
  if (isdirectory) {
    request.put(options, callback)
  } else {
    fsasync.createReadStream(file).pipe(request.put(options, callback))
  }
}
exports.sendfile = sendfile

function gettype(file) {
  const ext = file.match(/(.*)(?:\.([^.]+$))/)
  if (ext && ext[2]) {
    switch (ext[2]) {
      case 'json':
        return 'application/json'
      case 'xml':
        return 'text/xml'
      case 'html':
        return 'text/html;charset=UTF-8'
      case 'js':
        return 'text/javascript;charset=UTF-8'
      case 'css':
        return 'text/css;charset=UTF-8'
      case 'png':
        return 'image/png'
      case 'gif':
        return 'image/gif'
      case 'jpeg':
        return 'image/jpeg'
      case 'jpg':
        return 'image/jpeg'
      case 'svg':
        return 'image/svg+xml'
      case 'svgz':
        return 'image/svg+xml'
      case 'mpk':
        return 'application/x-msgpack'
      default:
        return 'application/octet-stream'
    }
  }
  return 'application/octet-stream'
}

exports.uploaderPlugin = function(entry) {
  this.entry = 'dist' + entry.replace(/(\.tsx)|(\.ts)/g, '.js')
  const apply = compiler => {
    compiler.hooks.afterEmit.tap({ name: 'vtecxutil' }, compilation => {
      sendfile(this.entry, '?_content&_bulk&_async')
    })
  }
  return apply
}
