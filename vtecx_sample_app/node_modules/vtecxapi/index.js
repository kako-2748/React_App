'use strict';

/**
 * <ul>
 *   <li>{@link vtecxapi.addids}
 *   <li>{@link vtecxapi.allocids}
 *   <li>{@link vtecxapi.count}
 *   <li>{@link vtecxapi.deleteEntry}
 *   <li>{@link vtecxapi.deleteFolder}
 *   <li>{@link vtecxapi.doResponse}
 *   <li>{@link vtecxapi.doResponseCsv}
 *   <li>{@link vtecxapi.doResponseHtml}
 *   <li>{@link vtecxapi.getContent}
 *   <li>{@link vtecxapi.getContentType}
 *   <li>{@link vtecxapi.getCookies}
 *   <li>{@link vtecxapi.getCsv}
 *   <li>{@link vtecxapi.getEntry}
 *   <li>{@link vtecxapi.getFeed}
 *   <li>{@link vtecxapi.getHeaders}
 *   <li>{@link vtecxapi.getHtml}
 *   <li>{@link vtecxapi.getMail}
 *   <li>{@link vtecxapi.getPathinfo}
 *   <li>{@link vtecxapi.getQueryString}
 *   <li>{@link vtecxapi.getRequest}
 *   <li>{@link vtecxapi.getSettingValue}
 *   <li>{@link vtecxapi.getStatus}
 *   <li>{@link vtecxapi.getUriAndQuerystring}
 *   <li>{@link vtecxapi.httpmethod}
 *   <li>{@link vtecxapi.log}
 *   <li>{@link vtecxapi.post}
 *   <li>{@link vtecxapi.put}
 *   <li>{@link vtecxapi.rangeids}
 *   <li>{@link vtecxapi.RXID}
 *   <li>{@link vtecxapi.saveFiles}
 *   <li>{@link vtecxapi.sendError}
 *   <li>{@link vtecxapi.sendMessage}
 *   <li>{@link vtecxapi.sendRedirect}
 *   <li>{@link vtecxapi.setHeader}
 *   <li>{@link vtecxapi.setids}
 *   <li>{@link vtecxapi.setStatus}
 *   <li>{@link vtecxapi.toPdf}
 *   <li>{@link vtecxapi.toXls}
 *   <li>{@link vtecxapi.uid}
 *   <li>{@link vtecxapi.adduserByAdmin}
 *   <li>{@link vtecxapi.pagenation}
 *   <li>{@link vtecxapi.getPage}
 * </ul>
 * @constructor
 */
var vtecxapi = function() {
};

/**
 * @description Outputs a message to the Admin Console.
 * @param  {string} message - message to output
 * @param  {string} [title] - title
 * @param  {string} [subtitle] - subtitle
 */
vtecxapi.log = function(message,title,subtitle) {

  try {
    if (subtitle) {
      ReflexContext.log(message,title,subtitle);
    } else {
      if (title) {
        ReflexContext.log(message,title);
      } else {
        ReflexContext.log(message);
      }
    }
  } catch (e) {
    if (e.message === 'ReflexContext is not defined') {
      if (subtitle) {
        console.log(title + ' ' + subtitle + ' ' + message);
      } else {
        if (title) {
          console.log(title + ' ' + message);
        } else {
          console.log(message);
        }
      }
    } else {
      console.log('reflexcontext.log() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Sends an error response to the client using the specified status.
 * @param  {number} status_code - http status code
 * @param  {string} [message] - message to send
 */
vtecxapi.sendError = function(status_code,message) {

  try {
    if (message) {
      ReflexContext.sendError(status_code,message);
    } else {
      ReflexContext.sendError(status_code);
    }
  }catch(e) {
    if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.sendError() is called but not executed. outfilename=' + outfilename);
    } else {
      console.log('reflexcontext.sendError() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Sends an feed response(including message) to the client using the specified status.
 * @param  {number} status_code - http status code
 * @param  {string} message - message to send
 */
vtecxapi.sendMessage = function(status_code,message) {

  try {
    ReflexContext.sendMessage(status_code,message);
  }catch(e) {
    if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.sendMessage() is called but not executed. outfilename=' + outfilename);
    } else {
      console.log('reflexcontext.sendMessage() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Send an mail (with attachments).
 * @param  {number} entry - contents
 * @param  {string} to - email addresses to
 * @param  {string} cc - email addresses cc
 * @param  {string} bcc - email addresses bcc
 * @param  {string} attachments - keys of attachment files
 */
vtecxapi.sendMail = function(entry,to,cc,bcc,attachments) {

  try {
    if (cc) {
      if (bcc) {
        if (attachments) {
          ReflexContext.sendMail(entry,to,cc,bcc,attachments);
        }else {
          ReflexContext.sendMail(entry,to,cc,bcc);
        }
      }else {
          ReflexContext.sendMail(entry,to,cc);
      }
    }else {
      ReflexContext.sendMail(entry,to);
    }
  }catch(e) {
    if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.sendMail() is called but not executed.');
    } else {
      console.log('reflexcontext.sendMail() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Convert to PDF and sends it to the client using the specified data and html.
 * @param  {feed} data - data
 * @param  {string} html - html template
 * @param  {string} outfilename - output filename
 * @param  {string} [baseurl] - base PDF's url
 */
vtecxapi.toPdf = function(data,html,outfilename,baseurl) {

  try {
    var pageData = data
    if (typeof data === 'number') {
        pageData = {
          pageList: {
            page:[]
          }
        }
        for (var i = 0; i < data; i++) {
          pageData.pageList.page.push({word: ''})
        }
    }
    if (baseurl) {
      ReflexContext.toPdf(pageData, html, outfilename,baseurl);
    } else {
      ReflexContext.toPdf(pageData, html, outfilename);
    }
  }catch(e) {
    if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.toPdf() is called but not executed. outfilename=' + outfilename);
    } else {
      console.log('reflexcontext.toPdf() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Convert to Xls and sends it to the client using the specified data and inputxls.
 * @param  {feed} data - data
 * @param  {string} inputxls - xls template
 * @param  {string} outfilename - output filename
 */
vtecxapi.toXls = function(data,inputxls,outfilename) {

  try {
    ReflexContext.toXls(data,inputxls,outfilename);
  }catch(e) {
    if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.toXls() is called but not executed. outfilename=' + outfilename);
    } else {
      console.log('reflexcontext.toXls() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Sends an content to the client using the specified html.
 * @param  {string} html - output html contents
 */
vtecxapi.doResponseHtml = function (html) {

  try {
    ReflexContext.doResponseHtml(html);
  }catch(e) {
    if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.doResponseHtml() is called but not executed.');
    } else {
      console.log('reflexcontext.doResponseHtml() : '+e.message);
      throw e;
    }
  }

}

/**
 * @description Sets the status code for this response.
 * @param  {number} status_code - http status code
 */
vtecxapi.setStatus = function (status_code) {

  try {
    ReflexContext.setStatus(status_code);
  }catch(e) {
    if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.setStatus() is called but not executed.');
    } else {
      console.log('reflexcontext.setStatus() : '+e.message);
      throw e;
    }
  }

}

/**
 * @description Gets the status code for this response.
 * @returns {number} - http status code
 */
vtecxapi.getStatus = function () {

  try {
    return Number(ReflexContext.getStatus());
  }catch(e) {
    if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.getStatus() is called but not executed.');
      return 200;
    } else {
      console.log('reflexcontext.getStatus() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Sends a temporary redirect response to the client using the specified redirect location URL.
 * @param  {string} location - redirect url
 */
vtecxapi.sendRedirect = function (location) {

  try {
    ReflexContext.sendRedirect(location);
  } catch (e) {
    if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.sendRedirect() is called but not executed.');
    } else {
      console.log('reflexcontext.sendRedirect() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Sets a response header with the given name and value.
 * @param  {string} name - header's name
 * @param  {string} value - header's value
 */
vtecxapi.setHeader = function (name,value) {

  try {
    ReflexContext.setHeader(name, value);
  } catch (e) {
    if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.setHeader() is called but not executed.');
    } else {
      console.log('reflexcontext.setHeader() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Returns the query string that is contained in the request URL after the path.
 * @param  {string} [param] - query parameter
 * @returns  {string} - query string
 */
vtecxapi.getQueryString = function (param) {

  try {
    if (param) {
      return ReflexContext.parameter(param);
    } else {
      return ReflexContext.querystring();
    }
  }catch(e) {
    if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.getQueryString() is called but not executed.');
      return '';
    } else {
      console.log('reflexcontext.getQueryString() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Returns the URL path and the query string.
 * @returns  {string} - the URL path and the query string.
 */
vtecxapi.getUriAndQuerystring = function () {

  try {
    return ReflexContext.uriquerystring();
  }catch(e) {
    if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.getUriAndQuerystring() is called but not executed.');
      return '';
    } else {
      console.log('reflexcontext.getUriAndQuerystring() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Returns any extra path information associated with the URL the client sent when it made this request.
 * @returns  {string} - pathinfo
 */
vtecxapi.getPathinfo = function () {

  try {
    return ReflexContext.pathinfo();
  } catch (e) {
    if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.getPathinfo() is called but not executed.');
      return '';
    } else {
      console.log('reflexcontext.getPathinfo() : '+e.message);
      throw e;
    }
  }

}

/**
 * @description Gets the content type for this response.
 * @returns  {string} - content type
 */
vtecxapi.getContentType = function () {

  try {
    return ReflexContext.contenttype();
  } catch (e) {
    if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.getContentType() is called but not executed.');
      return '';
    } else {
      console.log('reflexcontext.getContentType() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Returns the response entry object to the client by the specified url.
 * @param  {string} url - url
 * @param  {string} targetServiceName - targetServiceName of another service.
 * @param  {string} targetServiceKey - targetServiceKey of another service.
 * @param  {boolean} force - Forcibly execute even if it exceeds the upper limit of entries of request feed.
 * @returns  {feed} - feed
 */
vtecxapi.getEntry = function (url, targetServiceName, targetServiceKey) {

  try {
      var result = null
      if (targetServiceName&&targetServiceKey) {
        result = ReflexContext.getEntry(url,targetServiceName,targetServiceKey)
      }else {
        result = ReflexContext.getEntry(url)
      }
      if (result&&result.feed&&result.feed.entry) {
        return result.feed.entry[0]
      }else
      return null
  }catch (e) {
    if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.gete() is called but not executed.');
      return '{}';
    } else {
      console.log('reflexcontext.gete() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Returns the response feed object to the client by the specified url.
 * @param  {string} url - url
 * @param  {boolean} force - Forcibly execute even if it exceeds the upper limit of entries of request feed.
 * @param  {string} targetServiceName - targetServiceName of another service.
 * @param  {string} targetServiceKey - targetServiceKey of another service.
 * @returns  {feed} - feed
 */
vtecxapi.getFeed = function (url,force, targetServiceName, targetServiceKey) {

  try {
      if (force) {
        var p =''
        if (url.indexOf('?') != -1) {
          p = '&l=*'
        } else {
          p = '?l=*'
        }
        var result = null
        if (targetServiceName&&targetServiceKey) {
          result = ReflexContext.getFeed(url+p,targetServiceName,targetServiceKey)
        }else {
          result = ReflexContext.getFeed(url+p)
        }
        if (result&&result.feed&&result.feed.entry) {
          return result.feed.entry
        }else
        return []
      }else {
        var result = ReflexContext.getFeed(url)
        if (result&&result.feed&&result.feed.entry) {
          return result.feed.entry
        }else
        return []
      }
  }catch (e) {
    if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.getf() is called but not executed.');
      return [];
    } else {
      console.log('reflexcontext.getf() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Posts the request feed to the server with the specified url.
 * @param  {feed} request - request feed
 * @param  {string} url - url
 * @param  {boolean} force - Forcibly execute even if it exceeds the upper limit of entries of request feed.
 * @param  {string} targetServiceName - targetServiceName of another service.
 * @param  {string} targetServiceKey - targetServiceKey of another service.
 * @returns  {feed} - result
 */
vtecxapi.post = function (request,url,force, targetServiceName, targetServiceKey) {

  try {
      if (force) {
        var result = { 'feed': { 'entry': [] } };
        var cnt = 1000;  // max entry
        for(var ii = 0; ii < Math.ceil(request.feed.entry.length / cnt); ii++) {
          var j = ii * cnt;
          var newrequest = { 'feed' : { 'entry' : [] }};
          newrequest.feed.entry = request.feed.entry.slice(j, j + cnt);
          if (url) {
            if (targetServiceName&&targetServiceKey) {
              result.feed.entry = result.feed.entry.concat(ReflexContext.post(newrequest,url,targetServiceName, targetServiceKey).feed.entry);
            }else {
              result.feed.entry = result.feed.entry.concat(ReflexContext.post(newrequest,url).feed.entry);
            }
          }else {
            if (targetServiceName&&targetServiceKey) {
              result.feed.entry = result.feed.entry.concat(ReflexContext.post(newrequest,targetServiceName, targetServiceKey).feed.entry);
            }else {
              result.feed.entry = result.feed.entry.concat(ReflexContext.post(newrequest).feed.entry);
            }
          }
        }
        return result
      }else {
          if (url) {
            if (targetServiceName&&targetServiceKey) {
              return ReflexContext.post(request,url,targetServiceName, targetServiceKey);
            }else{
              return ReflexContext.post(request,url);
            }
          }else {
            if (targetServiceName&&targetServiceKey) {
              return ReflexContext.post(request,targetServiceName, targetServiceKey);
            }else {
              return ReflexContext.post(request);
            }
          }
      }
  } catch (e) {
    if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.post() is called but not executed.');
      return '{}';
    } else {
      console.log('reflexcontext.post() : '+e.message);
      throw e;
    }
  }

}

/**
 * @description Puts the request feed to the server.
 * @param  {feed} request - request feed
 * @param  {boolean} isbulk - Forcibly execute even if it exceeds the upper limit of entries of request feed.
 * @param  {boolean} parallel - Execute parallel if this param is true.
 * @param  {boolean} async - Execute asynchronous if this param is true.
 * @param  {string} targetServiceName - targetServiceName of another service.
 * @param  {string} targetServiceKey - targetServiceKey of another service.
 * @returns  {feed} result
 */
vtecxapi.put = function (request,isbulk,parallel,async, targetServiceName, targetServiceKey) {

  try {
    if (isbulk) {
      if (typeof parallel === 'undefined') parallel = false
      if (typeof async === 'undefined') async = false
      ReflexContext.bulkput(request,parallel,async);
    }else {
      if (targetServiceName&&targetServiceKey) {
        return ReflexContext.put(request, targetServiceName, targetServiceKey);
      }else {
        return ReflexContext.put(request);
      }
    }
  } catch (e) {
    if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.put() is called but not executed.');
      return '{}';
    } else {
      console.log('reflexcontext.put() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Deletes the entry data with the specified url and revision.
 * @param  {string} url - url
 * @param  {int} revision
 * @param  {string} targetServiceName - targetServiceName of another service.
 * @param  {string} targetServiceKey - targetServiceKey of another service.
 */
vtecxapi.deleteEntry = function (url,revision, targetServiceName, targetServiceKey) {

  try {
    if (revision) {
      if (targetServiceName&&targetServiceKey) {
        ReflexContext.delete(url,revision, targetServiceName, targetServiceKey);
      } else {
        ReflexContext.delete(url,revision);
      }
    } else {
      if (targetServiceName&&targetServiceKey) {
        ReflexContext.delete(url,targetServiceName, targetServiceKey);
      } else {
        ReflexContext.delete(url);
      }
    }
  } catch (e) {
    if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.delete() is called but not executed.');
      return '{}';
    } else {
      console.log('reflexcontext.delete() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Deletes the folder entry and descendants with the specified url.
 * @param  {string} url
 * @returns  {feed} feed
 */
vtecxapi.deleteFolder = function (url) {

  try {
    return ReflexContext.deleteFolder(url);
  } catch (e) {
    if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.deleteFolder() is called but not executed.');
      return '{}';
    } else {
      console.log('reflexcontext.deleteFolder() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Sets the value to the ids(numbering data) with the specified url.
 * @param  {string} url - url
 * @param  {number} num - value to set
 * @param  {string} targetServiceName - targetServiceName of another service.
 * @param  {string} targetServiceKey - targetServiceKey of another service.
 */
vtecxapi.setids = function (url,num, targetServiceName, targetServiceKey) {

  try {
    if (targetServiceName&&targetServiceKey) {
      return ReflexContext.setids(url,''+num,targetServiceName,targetServiceKey);
    }else {
      return ReflexContext.setids(url,''+num);
    }
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.setids() is called but not executed.');
    } else {
      console.log('reflexcontext.setids() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Adds the num value to the ids(numbering data) with the specified url.
 * @param  {string} url - url
 * @param  {number} num - number of additions
 * @param  {string} targetServiceName - targetServiceName of another service.
 * @param  {string} targetServiceKey - targetServiceKey of another service.
 * @returns {feed} - feed.title in results.
 */
vtecxapi.addids = function (url,num, targetServiceName, targetServiceKey) {

  try {
    if (targetServiceName&&targetServiceKey) {
      return ReflexContext.addids(url,num,targetServiceName,targetServiceKey);
    }else {
      return ReflexContext.addids(url,num);
    }
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.addids() is called but not executed.');
      return '0';
    } else {
      console.log('reflexcontext.addids() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Allocate the num value to the ids(numbering data) with the specified url.
 * @param  {string} url - url
 * @param  {number} num - number to allocate
 * @param  {string} targetServiceName - targetServiceName of another service.
 * @param  {string} targetServiceKey - targetServiceKey of another service.
 * @returns {feed} - feed.title in results.
 */
vtecxapi.allocids = function (url,num, targetServiceName, targetServiceKey) {

  try {
    if (targetServiceName&&targetServiceKey) {
      return ReflexContext.allocids(url,num,targetServiceName,targetServiceKey);
    }else {
      return ReflexContext.allocids(url,num);
    }
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.allocids() is called but not executed.');
      return '0';
    } else {
      console.log('reflexcontext.allocids() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Sets the range of the ids(numbering data) with the specified url.
 * @param  {string} url - url
 * @param  {string} range - range
 */
vtecxapi.rangeids = function (url,range) {

  try {
    ReflexContext.rangeids(url,range);
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.rangeids() is called but not executed.');
    } else {
      console.log('reflexcontext.rangeids() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Returns the number of entry to the client by the specified url.
 * @param  {string} url - url
 * @param  {string} targetServiceName - targetServiceName of another service.
 * @param  {string} targetServiceKey - targetServiceKey of another service.
 * @returns  {number} - results
 */
vtecxapi.count = function (url, targetServiceName, targetServiceKey) {

  try {
    if (targetServiceName&&targetServiceKey) {
      return Number(ReflexContext.count(url,targetServiceName,targetServiceKey));
    }else {
      return Number(ReflexContext.count(url));
    }
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.count() is called but not executed.');
      return 0;
    } else {
      console.log('reflexcontext.count() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Gets the feed data for this request.
 * @returns  {feed} - request data
 */
vtecxapi.getRequest = function () {

  try {
    var result = ReflexContext.getRequest();
    if (result&&result.feed&&result.feed.entry) {
          return result.feed.entry
    }else {
        return null
    }
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.getRequest() is called but not executed.');
      return '{}';
    } else {
      console.log('reflexcontext.getRequest() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Gets the cookies for this request.
 * @returns  {feed} - cookies
 */
vtecxapi.getCookies = function () {

  try {
    return ReflexContext.getCookies();
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.getCookies() is called but not executed.');
      return '';
    } else {
      console.log('reflexcontext.getCookies() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Gets the headers for this request.
 * @returns  {feed} - headers
 */
vtecxapi.getHeaders = function () {

  try {
    return ReflexContext.getHeaders();
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.getHeaders() is called but not executed.');
      return '';
    } else {
      console.log('reflexcontext.getHeaders() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Saves the files to the server with the specified props. This method is used simultaneously with file uploading.
 * @param  {props} props - save files info.
 */
vtecxapi.saveFiles = function (props) {

  try {
    ReflexContext.saveFiles(props);
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.saveFiles() is called but not executed.');
    } else {
      console.log('reflexcontext.saveFiles() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Gets the uid for this request. uid is a login user-specific code.
 * @returns  {Number} - uid
 */
vtecxapi.uid = function () {

  try {
    return Number(ReflexContext.uid());
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.uid() is called but not executed.');
      return '0';
    } else {
      console.log('reflexcontext.uid() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Gets the http method for this request.
 * @returns  {string} - httpmethod
 */
vtecxapi.httpmethod = function () {

  try {
    return ReflexContext.httpmethod();
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.httpmethod() is called but not executed.');
      return 'GET';
    } else {
      console.log('reflexcontext.httpmethod() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Gets the RXID
 * @returns  {string} - RXID
 */
vtecxapi.RXID = function () {

  try {
    return ReflexContext.RXID();
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.RXID() is called but not executed.');
      return '';
    } else {
      console.log('reflexcontext.RXID() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Gets the setting value of the service(/_settings/properties) by the specified key.
 * @param  {string} key - key
 * @returns  {string} - setting value
 */
vtecxapi.getSettingValue = function (key) {

  try {
    return ReflexContext.settingValue(key);
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.getSettingValue() is called but not executed.');
      return '';
    } else {
      console.log('reflexcontext.getSettingValue() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Returns the feed to the client by the specified feed and status_code.
 * @param  {feed} feed - feed to respond
 * @param  {int} status_code - http status code
 */
vtecxapi.doResponse = function (feed,status_code) {

  try {
    if (status_code) {
      ReflexContext.doResponse(feed,status_code);
    } else {
      ReflexContext.doResponse(feed);
    }
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.doResponse() is called but not executed.');
    } else {
      console.log('reflexcontext.doResponse() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Gets the html content by the specified url.
 * @param  {string} url - url
 * @returns  {string} - html content
 */
vtecxapi.getHtml = function (url) {

  try {
    return ReflexContext.content(url);
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.getHtml() is called but not executed.');
      return '';
    } else {
      console.log('reflexcontext.getHtml() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Gets the content by the specified url.
 * @param  {string} url - url
 * @returns  {string} - content
 */
vtecxapi.getContent = function (url) {

  try {
    return ReflexContext.contentbykey(url);
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.getContent() is called but not executed.');
      return '';
    } else {
      console.log('reflexcontext.getContent() : '+e.message);
      throw e;
    }
  }

}

/**
 * @description Gets the mail messages by the specified settings.
 * @param  {settings} settings - mail settings
 * @returns  {feed} - results
 */
vtecxapi.getMail = function (settings) {

  try {
    return ReflexContext.getMail(settings);
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.getMail() is called but not executed.');
      return '{}';
    } else {
      console.log('reflexcontext.getMail() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Convert the csv data to the feed.
 * @param  {string[]} header - csv header
 * @param  {string[]} items - csv items
 * @param  {string} parent - parent item(e.g.'entry')
 * @param  {number} skip - number to skip rows
 * @param  {string} encoding - encoding type
 * @returns  {feed} - results
 */
vtecxapi.getCsv = function (header,items,parent,skip,encoding) {

  try {
      var result = ReflexContext.getCsv(header,items,parent,skip,encoding);
      if (result&&result.feed&&result.feed.entry) {
        return result.feed.entry
      }else {
        return null
      }
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.getCsv() is called but not executed.');
      return '';
    } else {
      console.log('reflexcontext.getCsv() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Returns the csv data to the client using the specified value and filename.
 * @param  {string[]} value - csv rows
 * @param  {string} filename - output file's name
 * @returns  {string} - csv
 */
vtecxapi.doResponseCsv = function(value,filename) {

  try {
    return ReflexContext.doResponseCsv(value,filename);
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.doResponseCsv() is called but not executed.');
      return '';
    } else {
      console.log('reflexcontext.doResponseCsv() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Register users by admin.
 * @param  {feed} feed - feed to register users
 * @returns  {feed} - results
 */
vtecxapi.adduserByAdmin = function(feed) {

  try {
    return ReflexContext.adduserByAdmin(feed);
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.adduserByAdmin() is called but not executed.');
      return '';
    } else {
      console.log('reflexcontext.adduserByAdmin : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Store feed into session.
 * @param  {string} name - sessionkey
 * @param  {feed} feed - feed to store session
 */
vtecxapi.setSessionFeed = function(name,feed) {

  try {
    ReflexContext.setSessionFeed(feed,name);
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.setSessionFeed() is called but not executed.');
      return '';
    } else {
      console.log('reflexcontext.setSessionFeed : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Store entry into session.
 * @param  {string} name - sessionkey
 * @param  {entry} entry - entry to store session
 */
vtecxapi.setSessionEntry = function(name,entry) {

  try {
    ReflexContext.setSessionEntry(entry,name);
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.setSessionEntry() is called but not executed.');
      return '';
    } else {
      console.log('reflexcontext.setSessionEntry : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Store string into session.
 * @param  {string} name - sessionkey
 * @param  {string} str - string to store session
 */
vtecxapi.setSessionString = function(name,str) {

  try {
    ReflexContext.setSessionString(str,name);
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.setSessionString() is called but not executed.');
      return '';
    } else {
      console.log('reflexcontext.setSessionString : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Store long number into session.
 * @param  {string} name - sessionkey
 * @param  {long} num - long number to store session
 */
vtecxapi.setSessionLong = function(name,num) {

  try {
    ReflexContext.setSessionLong(num,name);
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.setSessionLong() is called but not executed.');
      return '';
    } else {
      console.log('reflexcontext.setSessionLong : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Get feed from session by name.
 * @param  {string} name - sessionkey
 * @returns  {feed} - results
 */
vtecxapi.getSessionFeed = function(name) {

  try {
    return ReflexContext.getSessionFeed(name);
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.getSessionFeed() is called but not executed.');
      return '';
    } else {
      console.log('reflexcontext.getSessionFeed : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Get entry from session by name.
 * @param  {string} name - sessionkey
 * @returns  {entry} - results
 */
vtecxapi.getSessionEntry = function(name) {

  try {
    return ReflexContext.getSessionEntry(name);
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.getSessionEntry() is called but not executed.');
      return '';
    } else {
      console.log('reflexcontext.getSessionEntry : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Get long number from session by name.
 * @param  {string} name - sessionkey
 * @returns  {long} - results
 */
vtecxapi.getSessionLong = function(name) {

  try {
    return ReflexContext.getSessionLong(name);
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.getSessionLong() is called but not executed.');
      return '';
    } else {
      console.log('reflexcontext.getSessionLong : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Delete feed of session.
 * @param  {string} name - sessionkey
 */
vtecxapi.deleteSessionFeed = function(name) {

  try {
    ReflexContext.deleteSessionFeed(name);
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.deleteSessionFeed() is called but not executed.');
      return '';
    } else {
      console.log('reflexcontext.deleteSessionFeed : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Delete entry of session.
 * @param  {string} name - sessionkey
 */
vtecxapi.deleteSessionEntry = function(name) {

  try {
    ReflexContext.deleteSessionEntry(name);
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.deleteSessionEntry() is called but not executed.');
      return '';
    } else {
      console.log('reflexcontext.deleteSessionEntry : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Delete long number of session.
 * @param  {string} name - sessionkey
 */
vtecxapi.deleteSessionLong = function(name) {

  try {
    ReflexContext.deleteSessionLong(name);
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.deleteSessionLong() is called but not executed.');
      return '';
    } else {
      console.log('reflexcontext.deleteSessionLong : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Add number in the session.
 * @param  {string} name - sessionkey
 * @param  {long} num - number added
 */
vtecxapi.incrementSession = function(name,num) {

  try {
    ReflexContext.incrementSession(name,num);
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.incrementSession() is called but not executed.');
      return '';
    } else {
      console.log('reflexcontext.incrementSession : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Create new pagenation index.
 * @param  {string} url - key and query parameters
 * @param  {long} num - start page number,end page number
 * @param  {string} targetServiceName - targetServiceName of another service.
 * @param  {string} targetServiceKey - targetServiceKey of another service.
 */
vtecxapi.pagenation = function(url,num, targetServiceName, targetServiceKey) {

  try {
    if (targetServiceName&&targetServiceKey) {
      ReflexContext.pagenation(url,num,targetServiceName, targetServiceKey);
    }else {
      ReflexContext.pagenation(url,num);
    }
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.pagenation() is called but not executed.');
      return '';
    } else {
      console.log('reflexcontext.pagenation : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Returns the response feed to the client by the specified url and page number.
 * @param  {string} url - url
 * @param  {string} num - Page number to get.
 * @param  {string} targetServiceName - targetServiceName of another service.
 * @param  {string} targetServiceKey - targetServiceKey of another service.
 * @returns  {feed} - feed
 */
vtecxapi.getPage = function (url,num, targetServiceName, targetServiceKey) {

  try {
    if (targetServiceName&&targetServiceKey) {
      return ReflexContext.getPage(url,num, targetServiceName, targetServiceKey)
    }else {
      return ReflexContext.getPage(url,num)
    }
  }catch (e) {
    if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.getPage() is called but not executed.');
      return '{}';
    } else {
      console.log('reflexcontext.getPage() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Posts the request feed to BigQuery.
 * @param  {feed} request - request feed
 * @param  {boolean} async - execute async
 */
vtecxapi.postBQ = function (request,async) {

  try {
      ReflexContext.postBQ(request,async)
  }catch (e) {
    if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.postBQ() is called but not executed.');
      return '{}';
    } else {
      console.log('reflexcontext.postBQ() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Delete records of BigQuery.
 * @param  {string[]} keys - keys to delete
 * @param  {boolean} async - execute async
 */
vtecxapi.deleteBQ = function (keys,async) {

  try {
      ReflexContext.deleteBQ(keys,async)
  }catch (e) {
    if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.deleteBQ() is called but not executed.');
      return '{}';
    } else {
      console.log('reflexcontext.deleteBQ() : '+e.message);
      throw e;
    }
  }
}

/**
 * @description Gets the data of BigQuery.
 * @param  {string} sql - sql to get
 * @returns  {feed} - results
 */
vtecxapi.getBQ = function (sql) {

  try {
      return ReflexContext.getBQ(sql)
  }catch (e) {
    if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.getBQ() is called but not executed.');
      return '{}';
    } else {
      console.log('reflexcontext.getBQ() : '+e.message);
      if (e.message.indexOf('Not found')>=0) {
        return []
      }else
      throw e;
    }
  }
}

/**
 * @description send a request to an external site.
 * @param  {string} url - endpoint of external site.
 * @param  {string} method - HTTP method
 * @param  {string} reqData - request data
 * @param  {props} headers - request headers
 */
vtecxapi.urlfetch = function (url, method, reqData, headers) {

  try {
    if (!reqData) reqData = ''
    if (!headers) headers = {}
    return ReflexContext.urlfetch(url, method, reqData, headers);
  } catch (e) {
   if (e.message === 'ReflexContext is not defined') {
      console.log('ReflexContext.urlfetch() is called but not executed.');
    } else {
      console.log('reflexcontext.urlfetch() : '+e.message);
      throw e;
    }
  }
}

module.exports = vtecxapi;
